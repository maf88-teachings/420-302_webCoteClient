= Les applications web monopage: l'asynchronicité au service de l'expérience utilisateur
Antoine Moevus <antoine@moev.us>;
:doctype: book
:toc:
:toc-title: Table des matières
:source-highlighter: rouge
:rouge-style: github
:mmdc: ./node_modules/.bin/mmdc
:mermaid:  ./node_modules/.bin/mermaid

<<<

== Références

* https://developer.mozilla.org/en-US/docs/Glossary/SPA[]
* https://en.wikipedia.org/wiki/Single-page_application[]
* https://developer.mozilla.org/fr/docs/Web/HTTP/Methods[]
* https://aws.amazon.com/what-is/restful-api/[]

== Vidéos explicatives

. https://vimeo.com/832014356/9a58b7fffb[Introduction]
. https://vimeo.com/832017180/48c845eb3e[SPA côté client]
. https://vimeo.com/832021539/5321ea8eec[SPA côté serveur et API Web]
. https://vimeo.com/832028127/1dddf5962e[API RESTful]

== Introduction

La programmation web est un domaine vaste qui comprend plusieurs aspects, comme la programmation côté client (front-end) et côté serveur (back-end), la gestion des bases de données, l'utilisation de différentes technologies et langages de programmation, et bien plus encore. 

Les applications Web monopage (SPA, Single Page Applications) sont un type spécial d'application Web qui fonctionne dans un navigateur et n'exige pas de chargement de page lors de l'utilisation de l'application. L'utilisateur interagit avec l'application Web dans une page Web dynamique, ce qui donne l'impression d'une application plus fluide.

Les SPA ont plusieurs avantages, notamment :

* Flux de navigation fluide sans rechargement de page
* Meilleure expérience utilisateur, car la plupart des ressources (HTML, CSS et Javascript) sont chargées une seule fois
* Séparation des préoccupations simple: le serveur Web est chargé de fournir l'API (interface de programmation d'application) et le client est chargé de la présentation et de l'interaction avec l'utilisateur

Cependant, elles ont aussi quelques inconvénients, tels que :

* Difficulté de gestion de l'historique de navigation (bien que cela puisse être géré avec des bibliothèques ou des cadriciels)
* Problèmes potentiels de référencement, car certains moteurs de recherche ont des problèmes pour indexer les applications dynamiques
* Premier chargement de page potentiellement lent, car l'ensemble de l'application doit être chargé en une seule fois


=== Histoire des SPA
L'histoire des applications Web monopages (anglais: Single Page Applications (SPA)) est assez récente et est étroitement liée à l'évolution du Web et des technologies qui le sous-tendent.

Dans les années 90 et au début des années 2000, la plupart des sites web étaient basés sur le modèle de livraison de pages statiques. Chaque interaction de l'utilisateur nécessitait un aller-retour complet au serveur, ce qui générait une nouvelle page HTML à afficher dans le navigateur de l'utilisateur. Cela fonctionnait, mais l’expérience utilisateur était lente et saccadée.

C'est alors que l'AJAX (Asynchronous JavaScript And XML) a commencé à gagner en popularité. AJAX a permis aux développeurs de mettre à jour une partie d'une page web sans avoir à recharger toute la page. Cette avancée a été le premier pas vers ce que nous connaissons aujourd'hui sous le nom de SPA.

En 2004, Google a dévoilé Gmail, qui était l'un des premiers exemples largement reconnus d'une SPA. Gmail a utilisé AJAX pour créer une expérience utilisateur fluide, où les utilisateurs pouvaient envoyer des emails, organiser leur boîte de réception, et effectuer d'autres tâches sans jamais quitter la page.

À partir de ce moment, la popularité des SPA a continué à augmenter, stimulée par le développement de plusieurs cadriciels JavaScript, comme Angular.js (publié en 2010), Backbone.js (publié en 2010), Ember.js (publié en 2011), React.js (publié en 2013) et Vue.js (publié en 2014). Ces cadriciels ont facilité la création de SPAs robustes et performantes.

== SPA côté client

Dans une application Web monopage, toute la logique est gérée côté client, c'est-à-dire dans le navigateur de l'utilisateur. C'est un changement majeur par rapport à l'approche traditionnelle où chaque nouvelle page nécessite une demande au serveur.

Dans une SPA, lorsqu'un utilisateur accède à votre application, le serveur envoie le fichier HTML, les fichiers CSS, les fichiers JavaScript et toutes les données nécessaires pour afficher la page d'accueil de votre site. À partir de ce moment, toutes les autres interactions se produisent sans intervention du serveur, sauf pour demander ou envoyer des données, comme des mises à jour de base de données.

Par exemple, considérons une application de blogue. Lorsqu'un utilisateur visite le blogue, le serveur envoie les fichiers HTML, CSS et JavaScript nécessaires pour afficher la page d'accueil. Si l'utilisateur clique sur un lien pour lire un article spécifique, le navigateur n'a pas besoin de contacter le serveur pour obtenir une nouvelle page HTML. Au lieu de cela, le JavaScript de l'application modifie le DOM pour afficher l'article demandé, ce qui donne l'impression d'une navigation rapide et fluide.

Un des avantages des SPA est qu'ils offrent une meilleure expérience utilisateur, car ils évitent les temps de chargement nécessaires pour récupérer une nouvelle page HTML à chaque interaction. Par contre, ils peuvent être plus complexes à mettre en œuvre et nécessitent des compétences avancées en JavaScript.



=== Exemple en JS pur

Tout d'abord, il faut comprendre que le cœur d'une SPA repose sur l'utilisation du DOM (Document Object Model) pour modifier dynamiquement le contenu de la page, et de l'API History pour modifier l'URL sans recharger la page.

Voici un exemple de code de base pour une SPA en JavaScript pur :

.Fichier `app.js`
[source, javascript]
----
// Cet objet contient toutes nos "pages"
const pages = {
  accueil: `
    <h1>Bienvenue sur notre site !</h1>
    <p>Cliquez <a href="/aPropos" data-link>ici</a> pour en savoir plus sur nous.</p>
  `,
  aPropos: `
    <h1>À propos de nous</h1>
    <p>Nous sommes une petite équipe passionnée par le développement web.</p>
    <p>Retournez à l'<a href="/" data-link>accueil</a>.</p>
  `,
};

// Cette fonction sera appelée à chaque fois que l'URL change
function naviguerVers(url) {
  // Optionnel: Permet de changer l'URL dans la barre de navigation
  window.history.pushState(null, null, url);
  // Changement du innerHTML de l'élément #app
  document.getElementById('app').innerHTML = pages[url.slice(1)] || pages.accueil;
}

// Écoutez les clics sur les liens pour les gérer avec notre fonction naviguerVers
document.body.addEventListener('click', function(e) {
  if (e.target.matches('[data-link]')) {
    e.preventDefault();
    const url = new URL(e.target.href)
    naviguerVers(url.pathname);
  }
});

// Initialisez l'application en naviguant vers l'URL actuelle
naviguerVers(window.location.pathname);
----

Dans cet exemple, nous avons deux "pages" stockées dans l'objet "pages". Elles sont définies par du code HTML sous forme de chaînes de caractères.

La fonction "naviguerVers" modifie l'URL avec l'API History et met à jour le contenu de la page en changeant le contenu de l'élément avec l'id "app".

Enfin, nous avons un écouteur d'événements sur le corps du document qui intercepte les clics sur les liens. Si le lien a l'attribut "data-link", nous empêchons le comportement par défaut (qui serait de faire une demande de nouvelle page au serveur) et à la place, nous appelons notre fonction "naviguerVers".

Voici le code HTML correspondant pour le JavaScript que nous avons présenté précédemment :

.Fichier `index.html`
[source, html]
----
<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ma Première SPA en JavaScript Pur</title>
  </head>
  <body>
    <div id="app"></div>

    <script src="app.js"></script>
  </body>
</html>
----

Dans ce code, nous avons une balise div avec l'ID "app". C'est l'endroit où notre contenu de page sera injecté lorsque l'URL change.

Ensuite, nous avons un lien vers notre fichier JavaScript (``app.js``) qui contient le code que nous avons écrit précédemment. Assurez-vous que le chemin vers votre fichier JavaScript est correct.

Lorsque vous ouvrez cette page dans un navigateur et naviguez entre les pages, vous verrez que l'URL change, mais la page n'est pas réellement rechargée. C'est la magie des SPA !

Notez qu'il s'agit d'un exemple très simplifié. Une véritable SPA serait beaucoup plus complexe et pourrait impliquer des choses comme la récupération de données à partir d'une API, le rendu conditionnel de différentes parties de l'interface utilisateur, et bien plus encore.


== SPA côté serveur

D'une manière générale, un serveur de SPA a pour responsabilité principale de répondre aux demandes HTTP faites par le client avec les ressources appropriées. Ces demandes peuvent être des demandes de pages, de scripts, de styles, mais aussi et surtout des demandes d'API pour interagir avec des données stockées côté serveur.

Une des grandes forces des SPA est leur capacité à interagir de manière dynamique et fluide avec ces données, grâce à des API RESTful. Ces API permettent au client et au serveur de communiquer de manière standardisée autour des opérations de création, lecture, mise à jour, et suppression de données, aussi connues sous l'acronyme CRUD.

Imaginons un serveur simple en `Node.js` qui répond à ces requêtes API. Pour cela, nous allons utiliser le cadriciel ``Express.js``, qui est largement utilisé et facilite grandement la mise en place d'un tel serveur. Nous allons également simuler une base de données avec un simple tableau JavaScript pour garder les choses simples.

[source, javascript]
----
const express = require('express');
const app = express();

let donnees = [
  { id: 1, nom: 'Alice' },
  { id: 2, nom: 'Bob' },
];

app.use(express.json());

// GET /api/utilisateurs
app.get('/api/utilisateurs', (req, res) => {
  res.json(donnees);
});

// POST /api/utilisateurs
app.post('/api/utilisateurs', (req, res) => {
  const utilisateur = { id: Date.now(), nom: req.body.nom };
  donnees.push(utilisateur);
  res.status(201).json(utilisateur);
});

// etc. pour les opérations de mise à jour et de suppression

app.listen(3000, () => console.log('Serveur en écoute sur le port 3000'));
----

Ce serveur est capable de répondre à deux types de requêtes : `GET` pour lire les données, et `POST` pour créer de nouvelles données. Vous pouvez facilement ajouter la prise en charge des requêtes `PUT` et `DELETE` pour compléter les opérations CRUD.

Ainsi, lorsque le client de la SPA fait une requête à l'API, par exemple pour récupérer la liste des utilisateurs ou pour en créer un nouveau, le serveur répond avec les données appropriées, que le client peut ensuite utiliser pour mettre à jour l'interface utilisateur.

Notez également que toutes ces requêtes sont faites de manière asynchrone, c'est-à-dire sans bloquer l'exécution du reste du code. C'est une des grandes forces des SPA : elles permettent une interaction fluide et réactive avec l'utilisateur, sans nécessiter de rechargement de page.

Cette approche serveur de SPA présente de nombreux avantages, notamment la possibilité de déléguer une grande partie du traitement au client, ce qui peut alléger la charge du serveur et améliorer la réactivité de l'application.


== Les interfaces de programmation (API)

Une Interface de Programmation d'Applications (anglais: API) peut être considérée comme un contrat entre différents logiciels sur la façon dont ils doivent interagir. Dans le contexte des applications web, les API sont généralement construites en utilisant HTTP (Hypertext Transfer Protocol) et peuvent renvoyer des données dans différents formats, tels que JSON (JavaScript Object Notation) ou XML (eXtensible Markup Language).

=== Pourquoi utiliser une API?

Les API sont essentielles pour la communication entre le client et le serveur dans une SPA. Elles fournissent un moyen structuré et sécurisé d'accéder aux données stockées côté serveur. Par exemple, si vous avez une application de blog, vous pouvez avoir une API qui permet au client de récupérer des articles de blog, d'en créer de nouveaux, d'en modifier et d'en supprimer.

Voici un exemple de ce à quoi pourrait ressembler une API pour une application de blog:

[source,js]
----
// Récupérer tous les articles
app.get('/api/articles', function(req, res) {
  // Code pour récupérer les articles de la base de données
});

// Récupérer un article spécifique
app.get('/api/articles/:id', function(req, res) {
  // Code pour récupérer l'article spécifique de la base de données
});

// Créer un nouvel article
app.post('/api/articles', function(req, res) {
  // Code pour créer un nouvel article dans la base de données
});

// Modifier un article
app.put('/api/articles/:id', function(req, res) {
  // Code pour modifier l'article dans la base de données
});

// Supprimer un article
app.delete('/api/articles/:id', function(req, res) {
  // Code pour supprimer l'article de la base de données
});
----

=== Les opérations CRUD

Dans l'exemple ci-dessus, vous avez peut-être remarqué que nous avons quatre types différents d'opérations que nous pouvons effectuer sur nos articles de blog. Ces quatre opérations sont souvent appelées opérations CRUD, qui est un acronyme pour Create, Read, Update, et DELETE. Les opérations CRUD correspondent souvent aux verbes HTTP de cette manière :

* Créer -> POST
* Lire -> GET
* Mettre à jour -> PUT
* Supprimer -> DELETE

Ces opérations sont la base de toute interaction entre le client et le serveur dans une SPA. En utilisant les opérations CRUD, le client peut demander spécifiquement les données dont il a besoin, ou apporter des modifications aux données existantes.

=== Les verbes HTTP

HTTP, ou Hypertext Transfer Protocol, est le protocole sur lequel repose le Web. Il définit la façon dont les messages sont formatés et transmis, et comment les serveurs et les navigateurs doivent répondre à ces messages.

Une caractéristique importante de HTTP est l'utilisation de ce que l'on appelle les "verbes" (aussi appelés "méthodes"). Les verbes HTTP définissent quel type d'action doit être effectué.

Voici une description de quelques-uns des verbes HTTP les plus couramment utilisés :

* **GET** : Le verbe GET est utilisé pour récupérer des données. Dans le contexte d'une API, une requête GET est généralement utilisée pour récupérer une ressource spécifique ou une collection de ressources.

* **POST** : Le verbe POST est utilisé pour envoyer des données. Il est généralement utilisé pour créer une nouvelle ressource.

* **PUT** : Le verbe PUT est utilisé pour mettre à jour une ressource existante avec de nouvelles données.

* **DELETE** : Comme son nom l'indique, le verbe DELETE est utilisé pour supprimer une ressource.

Ces verbes HTTP sont fondamentaux pour la communication entre le client (le navigateur) et le serveur dans le contexte des SPA, car ils permettent au client de demander des opérations spécifiques au serveur.

=== Anatomie des requêtes HTTP
==== La requête du client

Une requête HTTP envoyée par le client à un serveur contient généralement les informations suivantes :

* **Méthode HTTP** : Il s'agit du type de l'opération que le client souhaite effectuer. Les méthodes HTTP les plus courantes sont GET, POST, PUT, DELETE, etc.

* **URL** : L'URL (Uniform Resource Locator) est l'adresse du serveur à laquelle la requête est envoyée. Elle peut également inclure des informations supplémentaires, telles que des paramètres de requête.

* **En-têtes HTTP** : Les en-têtes HTTP contiennent des informations supplémentaires sur la requête ou le client. Par exemple, le type de contenu ("Content-Type") peut indiquer le format des données dans le corps de la requête.

* **Corps de la requête** : Le corps de la requête contient les données que le client envoie au serveur. Il est généralement utilisé avec les méthodes POST et PUT.

==== La réponse du serveur

La réponse HTTP du serveur à une requête du client contient également plusieurs composants :

* **Statut HTTP** : Le code de statut HTTP indique le résultat de la requête. Par exemple, un code de statut 200 signifie que la requête a réussi, tandis qu'un code de statut 404 signifie que la ressource demandée n'a pas été trouvée.

* **En-têtes HTTP** : Tout comme dans une requête, les en-têtes HTTP dans une réponse contiennent des informations supplémentaires sur la réponse ou le serveur.

* **Corps de la réponse** : Le corps de la réponse contient les données que le serveur renvoie au client. Dans le contexte d'une API RESTful, ces données sont généralement au format JSON ou XML.


== Les API RESTful

=== Principes
REST, qui signifie Representational State Transfer, est un style architectural pour développer des applications web. Une API RESTful est une API qui respecte les principes de REST.

Les API RESTful ont plusieurs caractéristiques :

1. **Sans état (Stateless)** : Chaque requête du client au serveur doit contenir toutes les informations nécessaires pour comprendre et traiter la requête. Le serveur ne peut conserver aucune information sur l'état du client entre les requêtes.

2. **Client-Serveur** : L'architecture client-serveur est fondamentale pour REST. Le client est responsable de l'interface utilisateur et de la gestion de l'utilisateur, tandis que le serveur stocke les données et traite les requêtes du client.

3. **Cacheable** : Les réponses du serveur peuvent être mises en cache par le client. Cela peut améliorer les performances en réduisant la charge sur le serveur.

4. **Interface uniforme** : Pour une API RESTful, l'interface (les URL, les verbes HTTP et les types de contenu) doit être uniforme, ce qui signifie qu'elle doit suivre un modèle cohérent.

Les librairies et les méthodes de développement moderne en Web, sont basées sur les concepts des API RESTful. Ainsi, un serveur fait avec Node.js et Express va respecter les principes RESTful.

=== Exemple simple
Pour illustrer cela, considérons l'exemple suivant :

[source,js]
----
// Récupération de tous les articles
app.get('/api/articles', function(req, res) {
  // Code pour récupérer les articles de la base de données
});

// Création d'un nouvel article
app.post('/api/articles', function(req, res) {
  // Code pour créer un nouvel article dans la base de données
});

// Mise à jour d'un article existant
app.put('/api/articles/:id', function(req, res) {
  // Code pour modifier l'article dans la base de données
});

// Suppression d'un article
app.delete('/api/articles/:id', function(req, res) {
  // Code pour supprimer l'article de la base de données
});
----


Cet exemple simple respecte les principes des API RESTful et a ainsi certains avantages.

=== Les avantages des API RESTful

Les API RESTful présentent plusieurs avantages qui contribuent à leur popularité et à leur large utilisation dans le développement web :

* **Scalabilité** : Grâce à leur architecture sans état, les API RESTful sont hautement scalables. Elles peuvent servir un nombre croissant de requêtes sans nécessiter de modifications majeures.

* **Performance** : La possibilité de mettre en cache les réponses du serveur améliore la performance en réduisant le nombre de requêtes nécessaires.

* **Simplicité** : L'utilisation d'URL standardisées et de verbes HTTP rend les API RESTful intuitives à comprendre et à utiliser.

* **Indépendance du langage** : Les API RESTful peuvent être consommées par tout client qui peut envoyer des requêtes HTTP et traiter des réponses HTTP. Cela signifie qu'elles peuvent être utilisées avec n'importe quel langage de programmation qui supporte le protocole HTTP.

* **Support pour les opérations CRUD** : Les API RESTful utilisent les verbes HTTP pour correspondre directement aux opérations CRUD, ce qui rend leur utilisation cohérente et intuitive.

* **Intégration facile avec d'autres technologies** : Grâce à leur nature basée sur HTTP, les API RESTful peuvent être facilement intégrées à d'autres technologies basées sur HTTP, comme les navigateurs web, les services de messagerie et même d'autres API.

Certainement, voici la réponse améliorée :

=== Authentification pour les API RESTful

Il existe différentes méthodes d'authentification qui peuvent être employées pour sécuriser les API RESTful. L'approche à choisir dépend de plusieurs facteurs, notamment les exigences de sécurité, le type de client, et la facilité d'utilisation.

. **Authentification de base (Basic Auth)** : Cette méthode, l'une des plus simples, consiste à envoyer le nom d'utilisateur et le mot de passe avec chaque requête dans un en-tête. Cependant, elle n'offre pas un niveau de sécurité très élevé, car les informations d'identification sont transmises en clair, à moins d'être utilisée avec le protocole HTTPS.

. **Authentification par jeton (Token Auth)** : Plus sécurisée, cette méthode fait appel à un jeton généré lors de la connexion de l'utilisateur. Ce jeton est ensuite envoyé avec chaque requête pour authentifier l'utilisateur. Les jetons peuvent être stockés de manière sécurisée et révoqués à tout moment, ce qui offre un niveau de contrôle supplémentaire.

. **OAuth** : Norme ouverte pour l'authentification et l'autorisation, OAuth permet aux utilisateurs d'autoriser des applications tierces à accéder à leurs informations sans partager leur mot de passe. Les applications utilisent des jetons pour accéder aux ressources en leur nom.

. **JWT (JSON Web Tokens)** : Cette méthode permet de représenter des revendications sécurisées entre deux parties. Les JWT sont stateless, ce qui signifie que l'état de l'utilisateur n'est pas stocké sur le serveur. Toutes les informations nécessaires sont contenues dans le jeton lui-même.

. **Clés API (API Keys)** : simples à utiliser, les clés API sont des identifiants uniques générés pour chaque utilisateur. Ils sont envoyés avec chaque requête. Si elles offrent un bon contrôle d'accès et une bonne capacité de suivi des requêtes, elles ne constituent pas une bonne option pour l'authentification des utilisateurs, car elles ne peuvent pas être facilement révoquées et ne sont généralement pas associées à des permissions spécifiques.


== Conclusion

Les SPA ont transformé la manière dont nous concevons et développons les applications web. En centralisant la logique de l'interface utilisateur côté client, les SPA offrent une expérience utilisateur fluide et interactive. Cependant, le succès d'une SPA dépend largement de sa communication avec le serveur, généralement via des API.

Les interfaces de programmation d'application (API) sont le moyen par lequel une SPA communique avec un serveur. Ces API doivent être bien conçues et gérées pour garantir des performances optimales et une sécurité adéquate.

Les API RESTful sont particulièrement populaires en raison de leur simplicité, de leur adaptabilité, et de leur compatibilité avec le protocole HTTP. Une excellente API RESTful publique que vous pouvez explorer est la https://pokeapi.co:[PokeAPI], qui offre une variété de données sur l'univers des Pokémon.

Cependant, quel que soit le type d'API utilisé, la sécurité est primordiale. Les méthodes d'authentification, comme l'authentification par jeton, OAuth ou JWT, sont essentielles pour garantir que seules les personnes autorisées puissent accéder à l'API.

En résumé, les SPA et les API RESTful sont des outils puissants dans le monde de la programmation web moderne. Lorsqu'ils sont utilisés correctement, ils peuvent aider à créer des applications web performantes, sécurisées, et agréables pour l'utilisateur.

== Exercices

1. **Définition et utilisation des API** : Pouvez-vous expliquer en vos propres mots ce qu'est une API et donner un exemple d'une situation où l'utilisation d'une API pourrait être bénéfique pour un développeur web?

2. **Création d'une API RESTful** : Imaginez que vous devez concevoir une API RESTful pour un catalogue de meubles. Quels seraient les principaux points d'extrémité (endpoints) que vous devriez inclure ? Que ferait chaque point d'extrémité ?

3. **Authentification API** : Pourquoi l'authentification est-elle importante pour une API, en particulier une API qui permet l'écriture de données ? Pouvez-vous expliquer un ou deux mécanismes d'authentification couramment utilisés pour les API ?

4. **Analyse d'API réelles** : Choisissez une API publique (par exemple, l'API de Twitter, Spotify, ou PokeAPI) et analysez sa structure. Quels sont les points d'extrémité disponibles ? Quels types de données renvoie-t-elle ? Comment est-elle authentifiée ? Quelle est votre opinion sur sa facilité d'utilisation et sa documentation ?